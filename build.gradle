buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }
    dependencies {
        classpath 'com.palantir.gradle.failure-reports:gradle-failure-reports:1.9.0'
        classpath 'com.palantir.jakartapackagealignment:jakarta-package-alignment:0.6.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.47.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.7.0'
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'com.palantir.git-version' version '3.0.0'
    id 'com.palantir.idea-test-fix' version '0.1.0'
    id 'com.palantir.baseline' version '4.147.0'
    id 'com.palantir.consistent-versions' version '2.22.0'
    id 'java-gradle-plugin'
    id 'groovy'
}

apply plugin: 'com.palantir.baseline-java-versions'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.jakarta-package-alignment'
apply plugin: 'com.palantir.java-format'
apply plugin: 'com.palantir.failure-reports'

group 'com.palantir.gradle.gitversion'
version gitVersion()

repositories {
    mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
}

sourceSets {
    groovy
    main.output.dir groovy.output
}

dependencies {
    groovyImplementation localGroovy()
    groovyImplementation gradleApi()

    // Access code written in groovy from src/main/java sources
    runtimeOnly configurations.groovyRuntimeClasspath
    implementation configurations.groovyImplementation
    implementation sourceSets.groovy.output

    annotationProcessor 'org.immutables:value'

    compileOnly 'org.immutables:value::annotations'

    implementation gradleApi()
    implementation 'com.google.guava:guava'

    testImplementation gradleTestKit()
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation 'junit:junit'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.spockframework:spock-core', {
        exclude module: 'groovy-all'
    }

    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine', {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
}

javaVersions {
    libraryTarget = 11
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Werror', '-Xlint:deprecation']
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-git-version'
    vcsUrl = 'https://github.com/palantir/gradle-git-version'
    description = 'Gradle Git-Version is a plugin that generates a version for use with Gradle by calling git-describe.'
    tags = ['git', 'version']

    plugins {
        gitVersionPlugin {
            id = 'com.palantir.git-version'
            displayName = 'Palantir Gradle Git-Version'
        }
    }
}

// Configure the publishPlugins task
publishPlugins.onlyIf { System.env.CIRCLE_TAG }
tasks.publish.dependsOn publishPlugins
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]
